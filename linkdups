#!/usr/bin/perl
#
# linkdups - Find duplicate files in a directory tree and link() them.
#
# $Id: linkdups,v 1.5 2000/04/06 17:47:15 steve Exp $

use strict;

use Getopt::Std;
use Digest::MD5;
use FileHandle;
use DirHandle;

use vars qw(%opt $context $recursive %files $debug $verbose $dryrun $total $num);

sub info(@);
sub debug(@);
sub basename($);
sub recurse_into($);
sub add($);

$debug=0;
$verbose=0;
$dryrun=0;
$total=0;

getopts('rvDn', \%opt);

$recursive=$opt{'r'} if (defined($opt{'r'}));
$verbose=$opt{'v'} if (defined($opt{'v'}));
$debug=$opt{'D'} if (defined($opt{'D'}));
$dryrun=$opt{'n'} if (defined($opt{'n'}));

if ($#ARGV==-1)
{
    if ($recursive)
    {
        $ARGV[0]=".";
    }
    else
    {
        $ARGV[0]="-";
    }
}

$context=new Digest::MD5;

foreach my $file (@ARGV)
{
    my @statbuf;
    if (!(@statbuf=lstat($file)))
    {
        print STDERR &basename(), ": $file: $!\n";
	next;
    }

    if ($recursive && (-d(_)))
    {
        &recurse_into($file);
    }
    else
    {
	if ($statbuf[3]>1)
	{
	    print STDERR "link count on $file is $statbuf[3]!\n";
	}
        &add($file);
    }
}

info "$num files scanned.\n";

info "$total bytes ";
info "would be " if ($dryrun);
info "saved.\n";

sub add($)
{
    my $file=shift;

    debug("$file\n");
    $num++;

    if (my $fd=new FileHandle "<$file")
    {
        $context->reset();
        $context->addfile($fd);
	my $hash=$context->hexdigest();
	debug("$hash  $file\n");
        close($fd);
	if (defined($files{$hash}))
	{
	    info "$file is a duplicate of $files{$hash}";
	    my $size=-s $file;
	    if ($size==0)
	    {
	        info " but it is only $size bytes\n";
		return;
	    }
	    else
	    {
	        info "\n";
		$total+=$size;
		return if ($dryrun);
		debug("unlinking $file...\n");
		unlink($file) or die "Can't unlink $file: $!\n";
		debug("linking $files{$hash} to $file...\n");
		link($files{$hash}, $file)
		    or die "Can't link $files{$hash} to $file: $!\n";
	    }
	}
	else
	{
            $files{$hash}=$file;
	}
    }
    else
    {
        print STDERR &basename(), ": $file: $!\n";
    }
}

sub recurse_into($)
{
    my $dir=shift;

    if (opendir(DIR, $dir))
    {
	my $x;
        for $x (grep(!/^\.{1,2}$/, readdir(DIR)))
	{
	    my @statbuf=lstat("$dir/$x");
	    if (-d(_))
	    {
	        &recurse_into("$dir/$x");
	    }
	    elsif (-f(_))
	    {
		if ($statbuf[3]>1)
		{
		    print STDERR "link count on $dir/$x is $statbuf[3]!\n";
		}
	        &add("$dir/$x");
	    }
	    else
	    {
	        info &basename(),
		    ": '$dir/$x' is not a plain file, skipping...\n";
	    }
	}
    }
    else
    {
        die "Can't open $dir: $!\n";
    }
}

sub basename($)
{
    my $foo=shift;
    $foo=$0 if (!defined($foo));

    return $foo if ($foo!~/\//);
    return substr($foo,(-1*length($foo))+(rindex($foo, "/")+1));
}

sub debug(@)
{
    print STDERR @_ if ($debug);
}

sub info(@)
{
    print @_ if ($verbose || $debug);
}
